use full_moon::{
    ast::types::{ExportedTypeDeclaration, TypeDeclaration, TypeInfo},
    tokenizer::{Token, TokenReference, TokenType},
};
use oas3::OpenApiV3Spec;

const HEADER_COMMENT: &str = "--[[
\tThis file was generated by openapi-luau.
\tDon't make manual changes.
]]\n";

pub fn generate_luau_types(spec: OpenApiV3Spec) -> Vec<ExportedTypeDeclaration> {
    let types = vec![];

    if let Some(components) = spec.components {
        for (k, v) in components.schemas {
            let type_decl = TypeDeclaration::new(
                TokenReference::new(
                    vec![],
                    Token::new(TokenType::Identifier {
                        identifier: k.into(),
                    }),
                    vec![],
                ),
                // TODO: Use type of `v` to construct the type
                TypeInfo::Basic(TokenReference::symbol("string").unwrap()),
            );

            println!("{:?}", type_decl);

            // types.append(ExportedTypeDeclaration::new(type_decl));
        }
    }

    println!("{:?}", types);

    types
}
